generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("CONNECTION_STRING")
}

model User {
  id             String         @id @default(uuid())
  firstName      String
  lastName       String
  email          String         @unique
  phone          String?        @unique
  password       String
  profileImage   String?
  totalDocuments Int            @default(0)
  isVerified     Boolean        @default(false)
  isActive       Boolean        @default(true)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  UserDocument   UserDocument[]
}

model DocumentType {
  id            String            @id @default(uuid())
  name          String            @unique
  description   String?
  templatePath  String?
  slug          String            @default("default-slug")
  isActive      Boolean           @default(true)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  fields        DocumentField[]
  userDocuments UserDocument[]
  category      DocumentCategory?
  icon          String?
}

model DocumentField {
  id             String              @id @default(uuid())
  documentTypeId String
  documentType   DocumentType        @relation(fields: [documentTypeId], references: [id], onDelete: Cascade)
  fieldName      String
  label          String
  fieldType      FieldType
  isRequired     Boolean             @default(true)
  sortOrder      Int                 @default(0)
  placeholder    String?
  defaultValue   String?
  validation     String?
  options        Json?
  helpText       String?
  section        String?
  minLength      Int?
  maxLength      Int?
  dependsOn      String?
  dependsValue   String?
  fieldData      DocumentFieldData[]

  @@index([documentTypeId, sortOrder])
}

model UserDocument {
  id                String              @id @default(uuid())
  userId            String
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentTypeId    String
  documentType      DocumentType        @relation(fields: [documentTypeId], references: [id], onDelete: Cascade)
  title             String
  status            DocumentStatus      @default(Draft)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  lastGeneratedAt   DateTime?
  generatedPdfPath  String?
  generatedDocxPath String?
  version           Int                 @default(1)
  isCurrent         Boolean             @default(true)
  fieldData         DocumentFieldData[]

  @@index([userId, documentTypeId])
}

model DocumentFieldData {
  id             String        @id @default(uuid())
  userDocumentId String
  userDocument   UserDocument  @relation(fields: [userDocumentId], references: [id], onDelete: Cascade)
  fieldId        String
  field          DocumentField @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  value          String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  versionNumber  Int           @default(1)

  @@unique([userDocumentId, fieldId, versionNumber])
  @@index([userDocumentId, fieldId])
}

enum DocumentCategory {
  professional
  legal
  personal
  education
  business
  creative
  technical
  medical
}

enum FieldType {
  text
  textarea
  number
  date
  email
  phone
  select
  checkbox
  radio
  file
  richText
  signature
}

enum DocumentStatus {
  Draft
  Completed
  Archived
  Published
}
